/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTColor.h"
#import "NTMBVectorTileStyleSet.h"
#import "NTCartoCSSStyleSet.h"
#import "NTVectorTileDecoder.h"
#import "NTUnsignedCharVector.h"

/**
 * Decoder for vector tiles in MapBox format.
 */
__attribute__ ((visibility("default"))) @interface NTMBVectorTileDecoder : NTVectorTileDecoder
-(void*)getCptr;
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 */
+(NTMBVectorTileDecoder*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Constructs decoder for MapBox vector tiles based on specified style set.<br>
 * If the style set contains multiple styles, the first one (based on lexicographical order) from the root folder is chosen as the current style.<br>
 * @param styleSet Style set for the tiles.
 */
-(id)initWithStyleSet: (NTMBVectorTileStyleSet*)styleSet;
/**
 * Constructs decoder for MapBox vector tiles based on specified style set.<br>
 * Specified style is selected as the current style.<br>
 * @param styleSet Style set for the tiles.<br>
 * @param styleName Style to select.
 */
-(id)initWithStyleSet: (NTMBVectorTileStyleSet*)styleSet styleName: (NSString*)styleName;
/**
 * Constructs decoder for MapBox vector tiles based on specified CartoCSS style set.<br>
 * @param cartoCSSStyleSet The CartoCSS style set for the tiles.
 */
-(id)initWithCartoCSSStyleSet: (NTCartoCSSStyleSet*)cartoCSSStyleSet;
/**
 * Returns the current style name. Not used for CartoCSS style sets.<br>
 * @return The current style name.
 */
-(NSString*)getCurrentStyleName;
/**
 * Select current style by style name. Not used for CartoCSS style sets.<br>
 * The style must exist in the style set container specified in the constructor as an xml file.<br>
 * This call will also reset style-related parameters, like geometry and billboard scales of the decoder.<br>
 * @param styleName style to use
 */
-(void)setCurrentStyle: (NSString*)styleName;
/**
 * Returns the current CartoCSS style set used by the decoder.<br>
 * If decoder uses non-CartoCSS style set, null is returned.<br>
 * @return The current style set.
 */
-(NTCartoCSSStyleSet*)getCartoCSSStyleSet;
/**
 * Sets the current CartoCSS style set used by the decoder.<br>
 * @param styleSet The new style set to use.
 */
-(void)setCartoCSSStyleSet: (NTCartoCSSStyleSet*)styleSet;
/**
 * Sets a style parameter to specified boolean value.<br>
 * The style parameter must be declared in the current style.<br>
 * @param param The parameter to set.<br>
 * @param value The value for the parameter.
 */
-(void)setStyleBoolParameter: (NSString*)param value: (BOOL)value;
/**
 * Sets a style parameter to specified integer value.<br>
 * The style parameter must be declared in the current style.<br>
 * @param param The parameter to set.<br>
 * @param value The value for the parameter.
 */
-(void)setStyleIntParameter: (NSString*)param value: (long long)value;
/**
 * Sets a style parameter to specified floating point value.<br>
 * The style parameter must be declared in the current style.<br>
 * @param param The parameter to set.<br>
 * @param value The value for the parameter.
 */
-(void)setStyleFloatParameter: (NSString*)param value: (double)value;
/**
 * Sets a style parameter to specified string value.<br>
 * The style parameter must be declared in the current style.<br>
 * @param param The parameter to set.<br>
 * @param value The value for the parameter.
 */
-(void)setStyleStringParameter: (NSString*)param value: (NSString*)value;
/**
 * Set tile buffering. This is intended for special tile sources like MapZen.<br>
 * @param buffer The amount of buffering to use. It is based on normalized tile coordinates (tile width=1.0), so 1.0/64.0 is a sensible value. The default is 0.
 */
-(void)setBuffering: (float)buffer;
-(int)getMinZoom;
-(int)getMaxZoom;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.<br>
 * @return The pointer to the connected director object or null if director is not connected.
 */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

