/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "PackageInfo_proxy.h"
#import "PackageMetaInfo_proxy.h"
#import "PackageStatus_proxy.h"
#import "PackageManagerListener_proxy.h"
#import "PackageInfoVectors_proxy.h"
#import "NutiteqPackageManagerBase_proxy.h"

/**
 * Offline map package manager. Package manager supports downloading/removing packages.<br>
 * It can be queried about available packages and status of the packages. It works asynchronously in<br>
 * the background and can inform app when packages have been updated.<br>
 * It works persistently. If a package download is started and app is closed, the download will resume<br>
 * when the package manager is started next time.
 */
__attribute__ ((visibility("default"))) @interface NTNutiteqPackageManager : NTNutiteqPackageManagerBase
-(void*)getCptr;
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * Constructs a PackageManager object, given application context and data folder.<br>
 * The data folder must exist before creating a new package manager and it is assumed to be persistent.<br>
 * Note: the package manager must be explicitly started using start() method!<br>
 * @param source Name of the package source. Currently "nutiteq.mbstreets" source is available<br>
 * @param dataFolder The folder where downloaded packages are kept. It must exist and must be writable.
 */
-(id)initWithSource: (NSString*)source dataFolder: (NSString*)dataFolder;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

